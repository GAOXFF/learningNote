1.命令行启动 git-bash  :bash
       退出           ：exit/ctrl+d
2.bash:
  $pwd                  --显示当前目录
  $mkdir                --创建文件夹
  $cd
3.基本操作
    1.初始化仓库
      $git init                --当前目录设置为管理仓库
      2.提交文件
      $git add <filename>      --添加文件
      $git commit -m"message"  --提交<注释>
        --git commit --amend   --修改最近一次提交的注释
    3.查看状态
      $git status              --查看工作区状态
      $git diff <filename>     --查看文件修改内容
    4.回滚
      --查看提交日志
      $git log
        --pretty=oneline
        #退出 q/ctrl+c
      $git relog
      --回滚
      $git reset
        --hard HEAD^
        --hard HEAD~n
        --hard <commit>
    5.概念解释 --暂存区（stage/index）
      工作区(Working Directory)--暂存区(stage)--版本库(Repository)（主分支）
      --git add 实际是把文件放入暂存区
      --git commit 将文件加入分支
    6.管理修改
      --git commit 只提交暂存区的修改，如果没有先add，修改不会被加入版本库
      --git diff 补充
        --git diff <filename>         工作区--暂存区
        --git diff --cached/staged    暂存区--版本库
        --git diff HEAD -- <filename> 工作区--版本库
    7.撤销修改
      $git checkout -- <filename>    撤销工作区修改
      $git reset HEAD -- <filename>  撤销暂存区修改（暂存区文件退回工作区）
      $git reset --hard               版本库中文件回滚
    8.文件删除
      正常删除
      $git rm <filename>
      $git commit -m "message"
      工作区误删
      $git checkout -- <filename>
        //删除可以看做是一次修改操作，所以撤销操作同上
        //git checkout 实际是用（版本库+暂存区）中最新文件替换工作区文件
    9.远程仓库
      创建 SSH Key:  $ssh-keygen -t rsa -C "youremail@example.com"
                      //主目录创建.SSH 文件夹及id_rsa文件
                      //id_rsa--秘钥    id_rsa.pub 公钥
      GitHub 账户添加SSH
                Account settings-->SSH Keys 粘贴id_rsa.pub全部内容
      关联:
                $git remote add <远程库名称> <远程库>     远程库名称：远程库默认名origin
                $git push -u origin master         (第一次提交并关联(-u))
                $git push origin master            (后续提交)
                //git clone <远程库地址> 建立关联并clone到本地，默认名origin
      远程库克隆:$git clone <远程库>
                //第一次用 clone
                //后续用 pull
                //或者 fetch(更新本地远程库)+merge origin/master master
      查看当前远程仓库：
                $git remote
                  -v           详细信息
   10.分支
      创建：     $git branch <name>
      切换：     $git checkout <name>
      创建+切换: $git checkout -b <name>
      查看：     $git branch             "*"指示当前分支
      合并：     $git merge <name>       name并入head
        合并补充：
          --git merge --no-ff -m"message" <name>  禁用Fast forward模式
                //fast forward    在无冲突的情况下合并，log里不显示合并操作
                                  按照直接更新显示,会丢掉分支信息
                //no-ff           显示合并操作，保留分支信息
        冲突：文件中会显示冲突部分，删除不需要的地方再次提交
          --git log --graph         显示分支图
          --abbrev-commit 简化commit
      删除：     $git branch -d <name>
        删除补充：--git branch -D <name>    强制删除非未合并分支
                //没有合并的分支删除后就丢失了
                //分支未合并普通删除删不掉
                //这个不记也行，会有提示

      暂存现场:
                $git stash        暂存现场，清空工作区
                $git stash list   显示暂存列表
                $git stash pop    恢复最新现场并删除
                $git stash apply  恢复单不删除
                --git stash stash@{n} 恢复指定现场
                $git stash drop   删除
      ***多人合作：暂时用不到后续再看
      ***rebase：
   10.标签(给commit号起一个别名)
      新建：       $git tag <tagname>                    默认为当前分支HEAD
                    --git tag <tagname> <commit id>      对指定commit id
                    --git tag -a <tagname> -m "message"  添加说明
      查看：
                   $git tag              查看所有标签
                   $git show <tagname>   查看标签详情
      推送:
                   $git push <远程库名> <tagname>
                   $git push --tags      推送全部本地标签
      删除：
                   $git tag -d <tagname>  删除本地
                   $git push <远程库名> :refs/tags/<tagname>
   #############################教程之外################################
   1. $git checkout <commit id>
        可以查看历史版本，实际新建临时分支，当转回主分支时会自动删除
   2. $git reset HEAD
        清空暂存区，实际上是用版本库当前分支的目录树替换暂存区目录
        （工作区，暂存区，版本库存在三组指针序列，当各种指针序列相同时为无修改？）
   3. git rm --cached<file>
        可以清除暂存区指定文件
   4.git checkout . /git checkout -- <file>
        用暂存区 全部/指定文件 替换工作区文件
   5.git checkout HEAD . /git checkout HEAD <file>
        用HEAD指向分支的版本库文件替换工作区和暂存区文件  （可以用来恢复文件？）
     注：网上说4.5的操作很危险，说明工作区文件还是很重要的？不应该提交后情况工作区
         4、5操作是从repository/stage中下载文件，替换同名文件，对工作区新增文件不影响
   6.当想要放弃修改时，尽量少用 git checkout -- <file>
     这种方法因为没有提交到版本库无法恢复
     多用git stash替换
   7.git stash 可以用来转移不同分支的工作区
   ###################################################################
   基本流程图
        workspace----------index----------local repository----------remote
  提交：    |------add------>|-----commit------->|---------push------->|
  恢复1：   |<-------------pull or rebase or clone(first)--------------|
  恢复2：                                        |<-------fetch--------|
  恢复3：   |<----------------checkout HEAD------|
  恢复4：   |<----checkout---|
  比较1：   |<-----------diff HEAD-------------->|
  比较2：                    |<--diff --cached-->|
  比较3：   |<-----diff----->|
